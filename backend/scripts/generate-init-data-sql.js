/**
 * ÁîüÊàêÂàùÂßãÂåñÊï∞ÊçÆ SQL Êñá‰ª∂
 * Âü∫‰∫é data-export.json ÁîüÊàêÁ∫Ø SQL INSERT ËØ≠Âè•
 */

const fs = require('fs').promises;
const path = require('path');
const bcrypt = require('bcryptjs');

// Simple UUID generator
function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// SQL ËΩ¨‰πâ
function escapeSql(str) {
  if (str === null || str === undefined) return 'NULL';
  return "'" + String(str).replace(/'/g, "''") + "'";
}

// JSON ËΩ¨‰πâ
function escapeJson(obj) {
  if (obj === null || obj === undefined) return 'NULL';
  return escapeSql(JSON.stringify(obj));
}

async function generateSql() {
  console.log('üöÄ ÂºÄÂßãÁîüÊàêÂàùÂßãÂåñÊï∞ÊçÆ SQL Êñá‰ª∂...\n');

  try {
    // ËØªÂèñÂØºÂá∫ÁöÑÊï∞ÊçÆ
    const dataPath = path.join(__dirname, '../data-export.json');
    const data = JSON.parse(await fs.readFile(dataPath, 'utf-8'));

    // ËØªÂèñÂÆåÊï¥ÁöÑÈÉ®Èó®ÂíåËèúÂçïÊï∞ÊçÆ
    const completeDataPath = path.join(__dirname, '../complete-data-export.json');
    const completeData = JSON.parse(await fs.readFile(completeDataPath, 'utf-8'));

    const now = new Date().toISOString();

    // ÁîüÊàê SQL
    let sql = `-- ==========================================
-- Owl ÁÆ°ÁêÜÁ≥ªÁªü - ÂàùÂßãÂåñÊï∞ÊçÆËÑöÊú¨
-- ==========================================
-- ÁîüÊàêÊó∂Èó¥: ${now}
-- Êï∞ÊçÆÊù•Ê∫ê: ÂºÄÂèëÁéØÂ¢ÉÂØºÂá∫
-- ËØ¥Êòé: ÂåÖÂê´ÊâÄÊúâÊùÉÈôê„ÄÅËèúÂçï„ÄÅËßíËâ≤„ÄÅÈÉ®Èó®„ÄÅÈÇÆ‰ª∂Ê®°ÊùøÂíåÊµãËØïË¥¶Âè∑
-- ==========================================

-- 1. Ê∏ÖÁ©∫Áé∞ÊúâÊï∞ÊçÆ (ÊåâÂ§ñÈîÆ‰æùËµñÂèçÂ∫èÂà†Èô§)
DELETE FROM user_roles;
DELETE FROM role_menus;
DELETE FROM role_permissions;
DELETE FROM users;
DELETE FROM email_templates;
DELETE FROM departments;
DELETE FROM menus;
DELETE FROM roles;
DELETE FROM permissions;

-- ==========================================
-- 2. ÊèíÂÖ•ÊùÉÈôê (${data.permissions.length} Êù°)
-- ==========================================

`;

    // ÁîüÊàêÊùÉÈôêÊï∞ÊçÆ
    const permissionIds = {};
    data.permissions.forEach(p => {
      const id = uuidv4();
      permissionIds[p.code] = id;
      sql += `INSERT INTO permissions (id, code, name, resource, action, category, description, created_at, updated_at) VALUES\n`;
      sql += `  ('${id}', ${escapeSql(p.code)}, ${escapeSql(p.name)}, ${escapeSql(p.resource)}, ${escapeSql(p.action)}, ${escapeSql(p.category)}, ${escapeSql(p.description)}, '${now}', '${now}');\n`;
    });

    sql += `\n-- ==========================================
-- 3. ÊèíÂÖ•ËßíËâ≤ (${data.roles.length} Êù°)
-- ==========================================

`;

    // ÁîüÊàêËßíËâ≤Êï∞ÊçÆ
    const roleIds = {
      'super_admin': uuidv4(),
      'admin': uuidv4(),
      'user': uuidv4()
    };

    data.roles.forEach(r => {
      const id = roleIds[r.code];
      sql += `INSERT INTO roles (id, code, name, description, status, sort, created_at, updated_at) VALUES\n`;
      sql += `  ('${id}', ${escapeSql(r.code)}, ${escapeSql(r.name)}, ${escapeSql(r.description)}, ${escapeSql(r.status)}, ${r.sort}, '${now}', '${now}');\n`;
    });

    sql += `\n-- ==========================================
-- 4. ÊèíÂÖ•ËèúÂçï (${completeData.menus.length} Êù°)
-- ==========================================

`;

    // ‰ΩøÁî®ÂÆûÈôÖÁöÑËèúÂçïÊï∞ÊçÆ
    const menus = completeData.menus.map(m => ({
      ...m,
      id: uuidv4()  // ÁîüÊàêÊñ∞ÁöÑID
    }));

    // ÂàõÂª∫IDÊò†Â∞Ñ
    const menuIdMap = {};
    completeData.menus.forEach((oldMenu, index) => {
      menuIdMap[oldMenu.id] = menus[index].id;
    });

    // Êõ¥Êñ∞parent_idÂºïÁî®
    menus.forEach(m => {
      if (m.parent_id && menuIdMap[m.parent_id]) {
        m.parent_id = menuIdMap[m.parent_id];
      }
    });

    menus.forEach(m => {
      sql += `INSERT INTO menus (id, parent_id, name, path, component, icon, type, visible, sort, status, permission_code, created_at, updated_at) VALUES\n`;
      sql += `  ('${m.id}', ${m.parent_id ? `'${m.parent_id}'` : 'NULL'}, ${escapeSql(m.name)}, ${m.path ? escapeSql(m.path) : 'NULL'}, ${m.component ? escapeSql(m.component) : 'NULL'}, ${escapeSql(m.icon)}, ${escapeSql(m.type)}, ${m.visible}, ${m.sort}, ${escapeSql(m.status)}, ${m.permission_code ? escapeSql(m.permission_code) : 'NULL'}, '${now}', '${now}');\n`;
    });

    sql += `\n-- ==========================================
-- 5. ÊèíÂÖ•ËßíËâ≤-ÊùÉÈôêÂÖ≥ËÅî
-- ==========================================

`;

    // super_admin Êã•ÊúâÊâÄÊúâÊùÉÈôê
    data.permissions.forEach(p => {
      sql += `INSERT INTO role_permissions (id, role_id, permission_id, created_at) VALUES ('${uuidv4()}', '${roleIds.super_admin}', '${permissionIds[p.code]}', '${now}');\n`;
    });

    // admin Êã•ÊúâÈô§ permission ÁÆ°ÁêÜÂ§ñÁöÑÊâÄÊúâÊùÉÈôê
    data.permissions.filter(p => !p.code.startsWith('permission:')).forEach(p => {
      sql += `INSERT INTO role_permissions (id, role_id, permission_id, created_at) VALUES ('${uuidv4()}', '${roleIds.admin}', '${permissionIds[p.code]}', '${now}');\n`;
    });

    // user Âè™ÊúâÊü•ÁúãÂíåÈÉ®ÂàÜÁÆ°ÁêÜÊùÉÈôê
    const userPermissions = ['user:read', 'role:read', 'permission:read', 'menu:read', 'department:read', 'monitor:read', 'monitor:manage', 'notification:read', 'notification:manage', 'email_template:read', 'email_template:create', 'email_template:update', 'email_template:delete', 'email:send'];
    userPermissions.forEach(code => {
      if (permissionIds[code]) {
        sql += `INSERT INTO role_permissions (id, role_id, permission_id, created_at) VALUES ('${uuidv4()}', '${roleIds.user}', '${permissionIds[code]}', '${now}');\n`;
      }
    });

    sql += `\n-- ==========================================
-- 6. ÊèíÂÖ•ËßíËâ≤-ËèúÂçïÂÖ≥ËÅî
-- ==========================================

`;

    // ÊâÄÊúâËßíËâ≤ÈÉΩËÉΩÁúãÂà∞ÊâÄÊúâËèúÂçï
    ['super_admin', 'admin', 'user'].forEach(roleCode => {
      menus.forEach(menu => {
        sql += `INSERT INTO role_menus (id, role_id, menu_id, created_at) VALUES ('${uuidv4()}', '${roleIds[roleCode]}', '${menu.id}', '${now}');\n`;
      });
    });

    sql += `\n-- ==========================================
-- 7. ÊèíÂÖ•ÈÉ®Èó® (${completeData.departments.length} Êù°)
-- ==========================================

`;

    // ‰ΩøÁî®ÂÆûÈôÖÁöÑÈÉ®Èó®Êï∞ÊçÆ
    const departments = completeData.departments.map(d => ({
      ...d,
      id: uuidv4(),
      leader_id: null  // ÂÖàËÆæ‰∏∫nullÔºåÁ®çÂêéÊõ¥Êñ∞
    }));

    // ÂàõÂª∫IDÊò†Â∞Ñ
    const deptIdMap = {};
    completeData.departments.forEach((oldDept, index) => {
      deptIdMap[oldDept.code] = departments[index].id;
    });

    // Êõ¥Êñ∞parent_idÂºïÁî®
    departments.forEach(d => {
      if (d.parent_id) {
        // ÊâæÂà∞Áà∂ÈÉ®Èó®ÁöÑcode
        const parentDept = completeData.departments.find(pd => pd.id === d.parent_id);
        if (parentDept) {
          d.parent_id = deptIdMap[parentDept.code];
        }
      }
    });

    const techDeptId = deptIdMap['TECH'];
    const marketDeptId = deptIdMap['MARKET'];

    departments.forEach(d => {
      sql += `INSERT INTO departments (id, parent_id, name, code, leader_id, description, sort, status, created_at, updated_at) VALUES\n`;
      sql += `  ('${d.id}', ${d.parent_id ? `'${d.parent_id}'` : 'NULL'}, ${escapeSql(d.name)}, ${escapeSql(d.code)}, NULL, ${escapeSql(d.description)}, ${d.sort}, ${escapeSql(d.status)}, '${now}', '${now}');\n`;
    });

    sql += `\n-- ==========================================
-- 8. ÊèíÂÖ•ÊµãËØïÁî®Êà∑ (3 ‰∏™)
-- ==========================================

`;

    const superAdminUserId = uuidv4();
    const adminUserId = uuidv4();
    const normalUserId = uuidv4();

    const adminPassword = await bcrypt.hash('admin123', 10);
    const managerPassword = await bcrypt.hash('manager123', 10);
    const userPassword = await bcrypt.hash('user123', 10);

    sql += `INSERT INTO users (id, username, email, password, real_name, phone, department_id, status, created_at, updated_at) VALUES\n`;
    sql += `  ('${superAdminUserId}', 'admin', 'admin@example.com', ${escapeSql(adminPassword)}, 'Ë∂ÖÁ∫ßÁÆ°ÁêÜÂëò', '13800138000', '${techDeptId}', 'active', '${now}', '${now}'),\n`;
    sql += `  ('${adminUserId}', 'manager', 'manager@example.com', ${escapeSql(managerPassword)}, 'ÁÆ°ÁêÜÂëò', '13800138001', '${techDeptId}', 'active', '${now}', '${now}'),\n`;
    sql += `  ('${normalUserId}', 'user', 'user@example.com', ${escapeSql(userPassword)}, 'ÊôÆÈÄöÁî®Êà∑', '13800138002', '${marketDeptId}', 'active', '${now}', '${now}');\n`;

    // Êõ¥Êñ∞ÈÉ®Èó®Ë¥üË¥£‰∫∫
    sql += `\n-- Êõ¥Êñ∞ÈÉ®Èó®Ë¥üË¥£‰∫∫\n`;
    sql += `UPDATE departments SET leader_id = '${superAdminUserId}' WHERE id = '${techDeptId}';\n`;

    sql += `\n-- ==========================================
-- 9. ÊèíÂÖ•Áî®Êà∑-ËßíËâ≤ÂÖ≥ËÅî
-- ==========================================

`;

    sql += `INSERT INTO user_roles (id, user_id, role_id, created_at) VALUES\n`;
    sql += `  ('${uuidv4()}', '${superAdminUserId}', '${roleIds.super_admin}', '${now}'),\n`;
    sql += `  ('${uuidv4()}', '${adminUserId}', '${roleIds.admin}', '${now}'),\n`;
    sql += `  ('${uuidv4()}', '${normalUserId}', '${roleIds.user}', '${now}');\n`;

    sql += `\n-- ==========================================
-- 10. ÊèíÂÖ•ÈÇÆ‰ª∂Ê®°Êùø (${data.emailTemplates.length} Êù°)
-- ==========================================

`;

    data.emailTemplates.forEach(t => {
      sql += `INSERT INTO email_templates (id, name, subject, content, template_type, variables, variable_schema, tags, description, created_at, updated_at) VALUES\n`;
      sql += `  ('${uuidv4()}', ${escapeSql(t.name)}, ${escapeSql(t.subject)}, ${escapeSql(t.content)}, ${escapeSql(t.template_type)}, ${t.variables ? escapeJson(t.variables) : 'NULL'}, ${escapeJson(t.variable_schema)}, ${escapeJson(t.tags)}, ${escapeSql(t.description)}, '${now}', '${now}');\n`;
    });

    sql += `\n-- ==========================================
-- ÂÆåÊàê
-- ==========================================

`;

    // ‰øùÂ≠ò SQL Êñá‰ª∂
    const outputPath = path.join(__dirname, '../init-data.sql');
    await fs.writeFile(outputPath, sql, 'utf-8');

    console.log(`‚úÖ SQL Êñá‰ª∂Â∑≤ÁîüÊàê: ${outputPath}\n`);
    console.log('üìä ÂåÖÂê´Êï∞ÊçÆ:');
    console.log(`   - ÊùÉÈôê: ${data.permissions.length} Êù°`);
    console.log(`   - ËèúÂçï: 17 Êù°`);
    console.log(`   - ËßíËâ≤: ${data.roles.length} Êù°`);
    console.log(`   - ÈÉ®Èó®: ${data.departments.length} Êù°`);
    console.log(`   - ÈÇÆ‰ª∂Ê®°Êùø: ${data.emailTemplates.length} Êù°`);
    console.log('   - ÊµãËØïË¥¶Âè∑: 3 ‰∏™');
    console.log('');
    console.log('üìù ÊµãËØïË¥¶Âè∑:');
    console.log('   Ë∂ÖÁ∫ßÁÆ°ÁêÜÂëò - Áî®Êà∑Âêç: admin, ÂØÜÁ†Å: admin123');
    console.log('   ÁÆ°ÁêÜÂëò     - Áî®Êà∑Âêç: manager, ÂØÜÁ†Å: manager123');
    console.log('   ÊôÆÈÄöÁî®Êà∑   - Áî®Êà∑Âêç: user, ÂØÜÁ†Å: user123');
    console.log('');
    console.log('üéâ ÁîüÊàêÂÆåÊàê!\n');

  } catch (error) {
    console.error('‚ùå ÁîüÊàêÂ§±Ë¥•:', error);
    process.exit(1);
  }
}

// ÊâßË°åÁîüÊàê
generateSql();
