'use client';

import { useEffect, useState } from 'react';
import { {{modulePath}}Api } from '@/lib/api';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';

interface {{moduleName}}FormDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  item?: any;
  onSuccess?: () => void;
}

export function {{moduleName}}FormDialog({
  open,
  onOpenChange,
  item,
  onSuccess,
}: {{moduleName}}FormDialogProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    {{#each formFields}}
    {{this.name}}: {{#if (eq this.type 'string')}}''{{else if (eq this.type 'number')}}0{{else if (eq this.type 'boolean')}}false{{else}}''{{/if}},
    {{/each}}
  });

  useEffect(() => {
    if (item) {
      setFormData({
        {{#each formFields}}
        {{this.name}}: item['{{this.name}}'] || {{#if (eq this.type 'string')}}''{{else if (eq this.type 'number')}}0{{else if (eq this.type 'boolean')}}false{{else}}''{{/if}},
        {{/each}}
      });
    } else {
      setFormData({
        {{#each formFields}}
        {{this.name}}: {{#if (eq this.type 'string')}}''{{else if (eq this.type 'number')}}0{{else if (eq this.type 'boolean')}}false{{else}}''{{/if}},
        {{/each}}
      });
    }
  }, [item]);

  const handleChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      setIsLoading(true);
      if (item) {
        await {{modulePath}}Api.update{{moduleName}}(item.id, formData);
        toast.success('更新成功');
      } else {
        await {{modulePath}}Api.create{{moduleName}}(formData);
        toast.success('创建成功');
      }
      onSuccess?.();
      onOpenChange(false);
    } catch (error) {
      console.error('提交失败:', error);
      const errorMessage = error.response?.data?.message || error.message || '操作失败';
      toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>{item ? '编辑' : '新建'}{{description}}</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          {{#each formFields}}
          {{#unless this.readonly}}
          <div className="space-y-2">
            <Label htmlFor="{{this.name}}">
              {{this.comment}}{{#if this.required}}<span className="text-red-500 ml-1">*</span>{{/if}}
            </Label>
            {{#if (eq this.formComponent 'input')}}
            <Input
              id="{{this.name}}"
              placeholder="请输入{{this.comment}}"
              {{#if (eq this.type 'number')}}type="number"{{/if}}
              value={formData['{{this.name}}']}
              onChange={(e) => handleChange('{{this.name}}', {{#if (eq this.type 'number')}}Number(e.target.value){{else}}e.target.value{{/if}})}
              {{#if this.required}}required{{/if}}
            />
            {{else if (eq this.formComponent 'textarea')}}
            <Textarea
              id="{{this.name}}"
              placeholder="请输入{{this.comment}}"
              rows={4}
              value={formData['{{this.name}}']}
              onChange={(e) => handleChange('{{this.name}}', e.target.value)}
              {{#if this.required}}required{{/if}}
            />
            {{else if (eq this.formComponent 'select')}}
            <Select
              value={formData['{{this.name}}']}
              onValueChange={(value) => handleChange('{{this.name}}', value)}
            >
              <SelectTrigger id="{{this.name}}">
                <SelectValue placeholder="请选择{{this.comment}}" />
              </SelectTrigger>
              <SelectContent>
                {{#each this.options}}
                <SelectItem value="{{this.value}}">{{this.label}}</SelectItem>
                {{/each}}
              </SelectContent>
            </Select>
            {{else if (eq this.formComponent 'date')}}
            <Input
              id="{{this.name}}"
              type="date"
              value={formData['{{this.name}}']}
              onChange={(e) => handleChange('{{this.name}}', e.target.value)}
              {{#if this.required}}required{{/if}}
            />
            {{else if (eq this.formComponent 'datetime')}}
            <Input
              id="{{this.name}}"
              type="datetime-local"
              value={formData['{{this.name}}']}
              onChange={(e) => handleChange('{{this.name}}', e.target.value)}
              {{#if this.required}}required{{/if}}
            />
            {{else}}
            <Input
              id="{{this.name}}"
              placeholder="请输入{{this.comment}}"
              value={formData['{{this.name}}']}
              onChange={(e) => handleChange('{{this.name}}', e.target.value)}
              {{#if this.required}}required{{/if}}
            />
            {{/if}}
          </div>
          {{/unless}}
          {{/each}}
          <div className="flex justify-end gap-2 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              disabled={isLoading}
            >
              取消
            </Button>
            <Button
              type="submit"
              disabled={isLoading}
            >
              {item ? '更新' : '创建'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
