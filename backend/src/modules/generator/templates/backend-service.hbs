const { sequelize } = require('../../models');
const { QueryTypes } = require('sequelize');
const ApiError = require('../../utils/ApiError');
const { logger } = require('../../config/logger');

/**
 * {{description}}服务
 * 使用原生 SQL 查询，无需在 models/index.js 中注册模型
 * 避免修改 models/index.js 导致应用重启
 */
class {{moduleName}}Service {
  constructor() {
    this.tableName = '{{tableName}}';
  }

  /**
   * 获取{{description}}列表（分页）
   */
  async get{{moduleName}}s(query) {
    const {
      page = 1,
      limit = 10,
      {{#each searchFields}}
      {{this.name}},
      {{/each}}
      sort = 'created_at',
      order = 'DESC',
    } = query;

    const offset = (page - 1) * limit;

    // 构建查询条件
    const conditions = [];
    const replacements = { limit: parseInt(limit), offset };

    {{#each searchFields}}
    {{#if (eq this.searchType 'like')}}
    if ({{this.name}}) {
      conditions.push('{{this.name}} ILIKE :{{this.name}}');
      replacements.{{this.name}} = `%${{{this.name}}}%`;
    }
    {{/if}}
    {{#if (eq this.searchType 'exact')}}
    if ({{this.name}}) {
      conditions.push('{{this.name}} = :{{this.name}}');
      replacements.{{this.name}} = {{this.name}};
    }
    {{/if}}
    {{#if (eq this.searchType 'range')}}
    if ({{this.name}}_start) {
      conditions.push('{{this.name}} >= :{{this.name}}_start');
      replacements.{{this.name}}_start = {{this.name}}_start;
    }
    if ({{this.name}}_end) {
      conditions.push('{{this.name}} <= :{{this.name}}_end');
      replacements.{{this.name}}_end = {{this.name}}_end;
    }
    {{/if}}
    {{/each}}

    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';

    // 查询数据
    const dataQuery = `
      SELECT * FROM ${this.tableName}
      ${whereClause}
      ORDER BY ${sort} ${order.toUpperCase()}
      LIMIT :limit OFFSET :offset
    `;

    const rows = await sequelize.query(dataQuery, {
      replacements,
      type: QueryTypes.SELECT,
    });

    // 查询总数
    const countQuery = `
      SELECT COUNT(*) as count FROM ${this.tableName}
      ${whereClause}
    `;

    const [{ count }] = await sequelize.query(countQuery, {
      replacements,
      type: QueryTypes.SELECT,
    });

    return {
      data: rows,
      pagination: {
        total: parseInt(count),
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(count / limit),
      },
    };
  }

  /**
   * 获取单个{{description}}详情
   */
  async get{{moduleName}}ById(id) {
    const query = `SELECT * FROM ${this.tableName} WHERE id = :id LIMIT 1`;

    const [item] = await sequelize.query(query, {
      replacements: { id },
      type: QueryTypes.SELECT,
    });

    if (!item) {
      throw ApiError.notFound('{{description}}不存在');
    }

    return item;
  }

  {{#if enableCreate}}
  /**
   * 创建{{description}}
   */
  async create{{moduleName}}(data) {
    {{#each formFields}}
    {{#if this.required}}
    if (!data.{{this.name}}) {
      throw ApiError.badRequest('{{this.comment}}不能为空');
    }
    {{/if}}
    {{/each}}

    // 构建插入字段和值
    const fields = Object.keys(data);
    const fieldNames = fields.join(', ');
    const fieldPlaceholders = fields.map(f => `:${f}`).join(', ');

    const query = `
      INSERT INTO ${this.tableName} (${fieldNames}, created_at, updated_at)
      VALUES (${fieldPlaceholders}, NOW(), NOW())
      RETURNING *
    `;

    const [item] = await sequelize.query(query, {
      replacements: data,
      type: QueryTypes.INSERT,
    });

    logger.info(`{{moduleName}} created: ${item[0].id}`);

    return item[0];
  }
  {{/if}}

  {{#if enableUpdate}}
  /**
   * 更新{{description}}信息
   */
  async update{{moduleName}}(id, updateData) {
    // 先检查记录是否存在
    await this.get{{moduleName}}ById(id);

    // 构建更新字段
    const fields = Object.keys(updateData);
    const setClause = fields.map(f => `${f} = :${f}`).join(', ');

    const query = `
      UPDATE ${this.tableName}
      SET ${setClause}, updated_at = NOW()
      WHERE id = :id
      RETURNING *
    `;

    const [item] = await sequelize.query(query, {
      replacements: { ...updateData, id },
      type: QueryTypes.UPDATE,
    });

    logger.info(`{{moduleName}} updated: ${id}`);

    return item[0];
  }
  {{/if}}

  {{#if enableDelete}}
  /**
   * 删除{{description}}
   */
  async delete{{moduleName}}(id) {
    // 先检查记录是否存在
    await this.get{{moduleName}}ById(id);

    const query = `DELETE FROM ${this.tableName} WHERE id = :id`;

    await sequelize.query(query, {
      replacements: { id },
      type: QueryTypes.DELETE,
    });

    logger.info(`{{moduleName}} deleted: ${id}`);

    return { message: '{{description}}删除成功' };
  }
  {{/if}}

  {{#if enableBatchDelete}}
  /**
   * 批量删除{{description}}
   */
  async batchDelete{{moduleName}}s(ids) {
    if (!Array.isArray(ids) || ids.length === 0) {
      throw ApiError.badRequest('请提供要删除的ID列表');
    }

    const placeholders = ids.map((_, i) => `:id${i}`).join(', ');
    const replacements = {};
    ids.forEach((id, i) => {
      replacements[`id${i}`] = id;
    });

    const query = `DELETE FROM ${this.tableName} WHERE id IN (${placeholders})`;

    const [, count] = await sequelize.query(query, {
      replacements,
      type: QueryTypes.DELETE,
    });

    logger.info(`{{moduleName}}s batch deleted: ${count} items`);

    return { message: `成功删除 ${count} 条记录`, count };
  }
  {{/if}}

  {{#if enableExport}}
  /**
   * 导出{{description}}数据
   */
  async export{{moduleName}}s(query) {
    const conditions = [];
    const replacements = {};

    {{#each searchFields}}
    {{#if (eq this.searchType 'like')}}
    if (query['{{this.name}}']) {
      conditions.push('{{this.name}} ILIKE :{{this.name}}');
      replacements.{{this.name}} = `%${query['{{this.name}}']}%`;
    }
    {{/if}}
    {{#if (eq this.searchType 'exact')}}
    if (query['{{this.name}}']) {
      conditions.push('{{this.name}} = :{{this.name}}');
      replacements.{{this.name}} = query['{{this.name}}'];
    }
    {{/if}}
    {{/each}}

    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';

    const exportQuery = `
      SELECT * FROM ${this.tableName}
      ${whereClause}
      ORDER BY created_at DESC
    `;

    const items = await sequelize.query(exportQuery, {
      replacements,
      type: QueryTypes.SELECT,
    });

    return items;
  }
  {{/if}}
}

module.exports = new {{moduleName}}Service();
